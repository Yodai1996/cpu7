	.text
	.align 	2
	.global min_caml_print_int
min_caml_print_int:
	mflr	r31 # リンクレジスタの値をr31に一時格納
	stw	r31, 4(r3) # 格納されたリンクレジスタの値をスタックに積む
	addi	r3, r3, 8 # スタックポインタを更新する
	stw	r2, 4(r3)
	addi	r3, e3, 8
	stw	r5, 4(r3)
	addi	r3, e3, 8
	stw	r6, 4(r3)
	addi	r3, e3, 8
	li	r10, 10 # r10に10をセット
	bl	print_int
	subi	r3, r3, 8
	lwz	r6, 4(r3)
	subi	r3, r3, 8
	lwz	r5, 4(r3)
	subi	r3, r3, 8
	lwz	r2, 4(r3)
	subi	r3, r3, 8
	lwz	r31, 4(r3)
	mtlr	r31
print_int:
	mr	r5, r2 # 転送する数の全体をr5に入れる:次の割られる数をセット
	addi	r6, r0, 28 # r6に28を代入
#	q7r2を呼び出す
	mflr	r31
	stw	r31, 4(r3)
	addi	r3, r3, 8
	bl	q2r7
	subi	r3, r3, 8
	lwz	r31, 4(r3)
	mtlr	r31
#	q7r2から戻る
	addi	r2, r2, 48 # asciiに変換
	out	r7 # 1桁転送
	cmpwi	cr7, r0, r2
	bgt cr7, print_int # r2(商)が0より大きければループ続行
	blr # 商が0になれば、終わり。
q2r7: # 割り算。商はr2、余りはr7へ
	slw	r8, r10, r6
	sub	r9, r5, 
	cmpwi	cr7, r9, 0
	blt	
	blr
