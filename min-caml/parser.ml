type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | ADHOC
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 51 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* ADHOC *);
  264 (* AST *);
  265 (* SLASH *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* SLASH_DOT *);
  270 (* EQUAL *);
  271 (* LESS_GREATER *);
  272 (* LESS_EQUAL *);
  273 (* GREATER_EQUAL *);
  274 (* LESS *);
  275 (* GREATER *);
  276 (* IF *);
  277 (* THEN *);
  278 (* ELSE *);
  280 (* LET *);
  281 (* IN *);
  282 (* FUN *);
  283 (* ARROW *);
  284 (* REC *);
  285 (* COMMA *);
  286 (* ARRAY_CREATE *);
  287 (* DOT *);
  288 (* LESS_MINUS *);
  289 (* SEMICOLON *);
  290 (* LPAREN *);
  291 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  279 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\008\000\008\000\009\000\009\000\009\000\003\000\003\000\003\000\
\005\000\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\006\000\002\000\
\003\000\003\000\003\000\003\000\006\000\004\000\005\000\002\000\
\001\000\008\000\007\000\003\000\004\000\003\000\001\000\004\000\
\002\000\001\000\005\000\003\000\001\000\001\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\039\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\045\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\054\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\007\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\084\000\017\000\028\000\057\000\052\000\018\000\059\000\091\000\
\029\000"

let yysindex = "\007\000\
\115\255\000\000\000\000\000\000\000\000\000\000\115\255\115\255\
\115\255\115\255\000\000\243\254\240\254\098\255\060\255\139\003\
\001\255\236\254\015\255\015\255\015\255\223\255\014\255\006\255\
\043\255\240\254\000\255\041\255\040\255\074\255\000\000\161\255\
\115\255\115\255\115\255\115\255\115\255\115\255\115\255\115\255\
\115\255\115\255\115\255\115\255\115\255\115\255\115\255\115\255\
\115\255\038\255\042\255\098\255\115\255\115\255\115\255\051\255\
\053\255\050\255\227\254\000\000\000\000\052\255\115\255\000\255\
\048\255\042\255\000\000\018\255\018\255\139\003\015\255\015\255\
\018\255\018\255\015\255\015\255\145\255\145\255\145\255\145\255\
\145\255\145\255\222\003\168\003\115\255\042\255\222\003\052\003\
\081\003\051\255\073\255\115\255\065\255\068\255\078\255\000\255\
\139\003\000\000\115\255\115\255\192\255\115\255\115\255\000\000\
\115\255\139\003\000\000\000\000\115\255\058\255\021\003\066\255\
\197\003\139\003\139\003\110\003\000\000\000\000\115\255\115\255\
\197\003\139\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\104\000\
\102\000\195\000\226\000\001\001\033\001\000\000\000\000\000\000\
\000\000\027\255\000\000\000\000\083\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\187\001\000\000\036\000\133\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\000\000\000\218\001\249\001\029\002\064\001\095\001\
\024\002\056\002\126\001\157\001\084\002\115\002\146\002\177\002\
\207\002\230\002\192\001\090\002\000\000\071\000\223\001\000\000\
\000\000\097\255\000\000\000\000\000\000\000\000\000\000\000\000\
\121\002\000\000\000\000\187\001\000\000\000\000\000\000\000\000\
\000\000\152\002\000\000\000\000\000\000\085\255\000\000\001\000\
\254\001\183\002\087\255\000\000\000\000\000\000\000\000\000\000\
\061\002\246\002"

let yygindex = "\000\000\
\004\000\003\000\096\000\000\000\000\000\000\000\000\000\037\000\
\245\255"

let yytablesize = 1265
let yytable = "\094\000\
\007\000\004\000\005\000\006\000\016\000\095\000\026\000\001\000\
\053\000\023\000\019\000\020\000\021\000\022\000\024\000\062\000\
\030\000\027\000\032\000\051\000\025\000\035\000\061\000\011\000\
\035\000\036\000\037\000\055\000\056\000\040\000\041\000\050\000\
\066\000\027\000\015\000\050\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\098\000\045\000\086\000\045\000\
\087\000\088\000\089\000\003\000\004\000\005\000\006\000\007\000\
\008\000\058\000\097\000\063\000\064\000\009\000\049\000\085\000\
\065\000\090\000\004\000\005\000\006\000\092\000\093\000\010\000\
\096\000\099\000\011\000\012\000\110\000\013\000\105\000\107\000\
\101\000\014\000\108\000\109\000\117\000\015\000\031\000\106\000\
\011\000\119\000\004\000\005\000\006\000\008\000\111\000\055\000\
\065\000\113\000\114\000\015\000\115\000\046\000\042\000\040\000\
\116\000\044\000\003\000\004\000\005\000\006\000\007\000\008\000\
\011\000\060\000\121\000\122\000\009\000\000\000\104\000\000\000\
\000\000\000\000\000\000\015\000\032\000\000\000\010\000\000\000\
\000\000\011\000\012\000\000\000\013\000\000\000\000\000\000\000\
\014\000\000\000\000\000\000\000\015\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\049\000\033\000\067\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\049\000\010\000\112\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\049\000\
\011\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\000\000\007\000\000\000\000\000\000\000\007\000\000\000\007\000\
\024\000\007\000\007\000\007\000\050\000\050\000\050\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\050\000\050\000\050\000\000\000\050\000\000\000\000\000\015\000\
\050\000\000\000\000\000\000\000\050\000\050\000\050\000\049\000\
\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\049\000\049\000\049\000\016\000\049\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\049\000\
\049\000\049\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\000\000\008\000\008\000\000\000\027\000\008\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\008\000\000\000\
\008\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\000\000\032\000\032\000\000\000\028\000\032\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\032\000\000\000\032\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\038\000\009\000\000\000\038\000\000\000\000\000\052\000\
\038\000\000\000\000\000\000\000\038\000\000\000\038\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\
\033\000\014\000\000\000\033\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000\010\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\010\000\
\013\000\000\000\010\000\000\000\000\000\023\000\010\000\000\000\
\000\000\000\000\010\000\000\000\010\000\011\000\011\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\026\000\
\000\000\011\000\000\000\000\000\012\000\011\000\000\000\000\000\
\000\000\011\000\000\000\011\000\000\000\024\000\024\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\000\000\024\000\024\000\025\000\
\000\000\024\000\000\000\000\000\035\000\024\000\000\000\000\000\
\000\000\024\000\000\000\024\000\015\000\015\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\017\000\015\000\015\000\000\000\000\000\
\015\000\036\000\000\000\000\000\015\000\000\000\000\000\000\000\
\015\000\000\000\015\000\016\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\018\000\016\000\016\000\000\000\000\000\016\000\
\030\000\000\000\000\000\016\000\000\000\000\000\000\000\016\000\
\000\000\016\000\027\000\027\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\021\000\027\000\027\000\000\000\000\000\027\000\031\000\
\000\000\000\000\027\000\000\000\000\000\000\000\027\000\000\000\
\027\000\028\000\028\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\022\000\028\000\028\000\000\000\000\000\028\000\029\000\000\000\
\000\000\028\000\000\000\000\000\000\000\028\000\000\000\028\000\
\009\000\009\000\009\000\009\000\000\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\019\000\009\000\
\009\000\000\000\000\000\009\000\052\000\052\000\000\000\009\000\
\052\000\000\000\000\000\009\000\052\000\009\000\014\000\014\000\
\052\000\000\000\052\000\014\000\014\000\020\000\000\000\014\000\
\014\000\014\000\014\000\014\000\014\000\000\000\014\000\014\000\
\000\000\000\000\014\000\051\000\051\000\034\000\014\000\051\000\
\000\000\000\000\014\000\051\000\014\000\013\000\013\000\051\000\
\000\000\051\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\013\000\023\000\023\000\000\000\013\000\023\000\000\000\
\000\000\013\000\000\000\013\000\026\000\026\000\023\000\000\000\
\023\000\026\000\026\000\000\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\026\000\026\000\000\000\000\000\
\026\000\012\000\012\000\000\000\026\000\012\000\000\000\000\000\
\026\000\000\000\026\000\000\000\025\000\025\000\000\000\012\000\
\000\000\025\000\025\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\025\000\025\000\000\000\000\000\
\025\000\035\000\035\000\000\000\025\000\035\000\000\000\000\000\
\025\000\000\000\025\000\000\000\000\000\035\000\000\000\035\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\017\000\000\000\000\000\017\000\000\000\036\000\036\000\
\017\000\000\000\036\000\000\000\017\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\030\000\030\000\018\000\
\000\000\030\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\
\000\000\000\000\021\000\000\000\031\000\031\000\021\000\000\000\
\031\000\000\000\021\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\
\000\000\022\000\000\000\029\000\029\000\022\000\000\000\029\000\
\000\000\022\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\000\000\000\000\019\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\019\000\
\000\000\019\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\020\000\000\000\000\000\020\000\000\000\
\000\000\000\000\020\000\000\000\000\000\000\000\020\000\000\000\
\020\000\000\000\034\000\034\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\049\000\000\000\118\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\102\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\049\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\103\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\000\000\120\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\049\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\000\000\
\100\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000"

let yycheck = "\029\001\
\000\000\001\001\002\001\003\001\001\000\035\001\023\001\001\000\
\029\001\023\001\007\000\008\000\009\000\010\000\028\001\027\000\
\014\000\034\001\015\000\017\000\034\001\007\001\023\001\023\001\
\007\001\008\001\009\001\014\001\023\001\012\001\013\001\031\001\
\030\000\034\001\034\001\000\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\064\000\027\001\052\000\029\001\
\053\000\054\000\055\000\000\001\001\001\002\001\003\001\004\001\
\005\001\023\001\063\000\027\001\029\001\010\001\000\000\034\001\
\031\001\023\001\001\001\002\001\003\001\025\001\029\001\020\001\
\029\001\034\001\023\001\024\001\096\000\026\001\014\001\023\001\
\085\000\030\001\023\001\014\001\035\001\034\001\035\001\092\000\
\023\001\032\001\001\001\002\001\003\001\000\000\099\000\000\000\
\031\001\102\000\103\000\034\001\105\000\027\001\014\001\025\001\
\109\000\029\001\000\001\001\001\002\001\003\001\004\001\005\001\
\023\001\026\000\119\000\120\000\010\001\255\255\090\000\255\255\
\255\255\255\255\255\255\034\001\000\000\255\255\020\001\255\255\
\255\255\023\001\024\001\255\255\026\001\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\000\000\035\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\000\000\035\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\000\000\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\000\000\033\001\034\001\035\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\255\255\025\001\255\255\255\255\000\000\
\029\001\255\255\255\255\255\255\033\001\034\001\035\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\000\000\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\034\001\035\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\000\000\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\255\255\000\000\025\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\000\000\255\255\025\001\255\255\255\255\000\000\
\029\001\255\255\255\255\255\255\033\001\255\255\035\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\000\000\255\255\025\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\005\001\006\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\000\000\255\255\025\001\255\255\255\255\000\000\029\001\255\255\
\255\255\255\255\033\001\255\255\035\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\000\000\
\255\255\025\001\255\255\255\255\000\000\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\255\255\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\000\000\
\255\255\025\001\255\255\255\255\000\000\029\001\255\255\255\255\
\255\255\033\001\255\255\035\001\005\001\006\001\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\000\000\021\001\022\001\255\255\255\255\
\025\001\000\000\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\255\255\035\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\000\000\021\001\022\001\255\255\255\255\025\001\
\000\000\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\000\000\021\001\022\001\255\255\255\255\025\001\000\000\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\021\001\022\001\255\255\255\255\025\001\000\000\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\021\001\
\022\001\255\255\255\255\025\001\021\001\022\001\255\255\029\001\
\025\001\255\255\255\255\033\001\029\001\035\001\005\001\006\001\
\033\001\255\255\035\001\010\001\011\001\000\000\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\021\001\022\001\000\000\029\001\025\001\
\255\255\255\255\033\001\029\001\035\001\005\001\006\001\033\001\
\255\255\035\001\010\001\011\001\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\025\001\021\001\022\001\255\255\029\001\025\001\255\255\
\255\255\033\001\255\255\035\001\005\001\006\001\033\001\255\255\
\035\001\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\255\255\
\025\001\021\001\022\001\255\255\029\001\025\001\255\255\255\255\
\033\001\255\255\035\001\255\255\005\001\006\001\255\255\035\001\
\255\255\010\001\011\001\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\255\255\255\255\
\025\001\021\001\022\001\255\255\029\001\025\001\255\255\255\255\
\033\001\255\255\035\001\255\255\255\255\033\001\255\255\035\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\255\255\255\255\025\001\255\255\021\001\022\001\
\029\001\255\255\025\001\255\255\033\001\255\255\035\001\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\025\001\255\255\021\001\022\001\029\001\
\255\255\025\001\255\255\033\001\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\255\255\255\255\025\001\255\255\021\001\022\001\029\001\255\255\
\025\001\255\255\033\001\255\255\035\001\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\255\255\
\255\255\025\001\255\255\021\001\022\001\029\001\255\255\025\001\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\255\255\035\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\255\255\
\035\001\255\255\021\001\022\001\255\255\255\255\025\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\033\001\255\255\035\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\033\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\255\255\033\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  ADHOC\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 73 "parser.mly"
    ( _2 )
# 546 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
    ( Unit (getpos ()) )
# 552 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 77 "parser.mly"
    ( Bool(_1, getpos ()) )
# 559 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 79 "parser.mly"
    ( Int(_1, getpos ()) )
# 566 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 81 "parser.mly"
    ( Float(_1, getpos ()) )
# 573 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 83 "parser.mly"
    ( Var(_1, getpos ()) )
# 580 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 85 "parser.mly"
    ( Get(_1, _4) )
# 588 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 89 "parser.mly"
    ( _1 )
# 595 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 91 "parser.mly"
 ( _1 )
# 602 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
    ( Not(_2) )
# 609 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 97 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 618 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 101 "parser.mly"
 ( AdHoc(_1, _3) )
# 626 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( Add(_1, _3) )
# 634 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 105 "parser.mly"
    ( Sub(_1, _3) )
# 642 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
 ( Mul(_1, _3) )
# 650 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
 ( Div(_1, _3) )
# 658 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( Eq(_1, _3) )
# 666 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 674 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
    ( Not(LE(_3, _1)) )
# 682 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( Not(LE(_1, _3)) )
# 690 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( LE(_1, _3) )
# 698 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( LE(_3, _1) )
# 706 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( If(_2, _4, _6) )
# 715 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( FNeg(_2) )
# 722 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( FAdd(_1, _3) )
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    ( FSub(_1, _3) )
# 738 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( FMul(_1, _3) )
# 746 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( FDiv(_1, _3) )
# 754 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 763 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( LetRec(_3, _5) )
# 779 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 147 "parser.mly"
    ( App(_1, _2) )
# 787 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 150 "parser.mly"
    ( Tuple(_1) )
# 794 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 803 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( Put(_1, _4, _7) )
# 812 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 820 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 158 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 828 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 161 "parser.mly"
    ( Array(_2, _3) )
# 836 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 847 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 172 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 856 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 176 "parser.mly"
    ( addtyp _1 :: _2 )
# 864 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 178 "parser.mly"
    ( [addtyp _1] )
# 871 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 182 "parser.mly"
 ( _2 @ _4 )
# 879 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 184 "parser.mly"
 ( _1 @ _3 )
# 887 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 186 "parser.mly"
 ( [addtyp _1] )
# 894 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 190 "parser.mly"
 ( _1 )
# 901 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 192 "parser.mly"
 ( addtyp _1 :: _2 )
# 909 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 194 "parser.mly"
 ( [addtyp _1] )
# 916 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 199 "parser.mly"
    ( _1 @ [_2] )
# 924 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 202 "parser.mly"
    ( [_1] )
# 931 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 206 "parser.mly"
    ( _1 @ [_3] )
# 939 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 208 "parser.mly"
    ( [_1; _3] )
# 947 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 212 "parser.mly"
    ( _1 @ [addtyp _3] )
# 955 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 214 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 963 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
