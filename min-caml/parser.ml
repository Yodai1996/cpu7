type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | FUN
  | ARROW
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let getpos () = {
		   ls = (Parsing.symbol_start_pos ()).Lexing.pos_lnum;
		   le = (Parsing.symbol_end_pos ()).Lexing.pos_lnum;
           chs = (Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol;
           che = (Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol}
# 50 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* FUN *);
  282 (* ARROW *);
  283 (* REC *);
  284 (* COMMA *);
  285 (* ARRAY_CREATE *);
  286 (* DOT *);
  287 (* LESS_MINUS *);
  288 (* SEMICOLON *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\004\000\008\000\
\008\000\009\000\009\000\009\000\003\000\003\000\003\000\005\000\
\005\000\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\006\000\002\000\003\000\
\003\000\003\000\003\000\006\000\004\000\005\000\002\000\001\000\
\008\000\007\000\003\000\004\000\003\000\001\000\004\000\002\000\
\001\000\005\000\003\000\001\000\001\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\038\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\011\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\044\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\014\000\015\000\000\000\000\000\
\026\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\053\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\082\000\017\000\028\000\056\000\051\000\018\000\058\000\089\000\
\029\000"

let yysindex = "\004\000\
\113\255\000\000\000\000\000\000\000\000\000\000\113\255\113\255\
\113\255\113\255\000\000\237\254\240\254\106\255\058\255\185\002\
\072\255\235\254\000\000\000\000\000\000\073\002\018\255\030\255\
\032\255\240\254\243\254\040\255\043\255\122\255\000\000\156\255\
\113\255\113\255\113\255\113\255\113\255\113\255\113\255\113\255\
\113\255\113\255\113\255\113\255\113\255\113\255\113\255\113\255\
\035\255\042\255\106\255\113\255\113\255\113\255\054\255\055\255\
\050\255\036\255\000\000\000\000\056\255\113\255\243\254\052\255\
\042\255\000\000\022\255\022\255\000\000\000\000\022\255\022\255\
\000\000\000\000\016\255\016\255\016\255\016\255\016\255\016\255\
\009\003\213\002\113\255\042\255\009\003\101\002\129\002\054\255\
\075\255\113\255\067\255\068\255\082\255\243\254\185\002\000\000\
\113\255\113\255\187\255\113\255\113\255\000\000\113\255\185\002\
\000\000\000\000\113\255\062\255\217\255\066\255\241\002\185\002\
\185\002\157\002\000\000\000\000\113\255\113\255\241\002\185\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\099\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\230\254\000\000\000\000\085\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\218\000\
\000\000\035\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\159\000\000\000\248\000\024\001\000\000\000\000\054\001\088\001\
\000\000\000\000\118\001\148\001\178\001\208\001\237\001\003\002\
\018\002\001\001\000\000\069\000\023\002\000\000\000\000\088\255\
\000\000\000\000\000\000\000\000\000\000\000\000\154\001\000\000\
\000\000\218\000\000\000\000\000\000\000\000\000\000\000\184\001\
\000\000\000\000\000\000\084\255\000\000\001\000\094\001\214\001\
\095\255\000\000\000\000\000\000\000\000\000\000\124\001\043\002"

let yygindex = "\000\000\
\003\000\002\000\100\000\000\000\000\000\000\000\000\000\039\000\
\244\255"

let yytablesize = 1051
let yytable = "\044\000\
\007\000\044\000\023\000\016\000\001\000\026\000\052\000\024\000\
\060\000\019\000\020\000\021\000\022\000\025\000\061\000\030\000\
\027\000\032\000\050\000\027\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\035\000\036\000\054\000\065\000\
\039\000\040\000\049\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\096\000\055\000\084\000\057\000\085\000\086\000\
\087\000\003\000\004\000\005\000\006\000\007\000\008\000\092\000\
\095\000\062\000\009\000\083\000\048\000\093\000\063\000\064\000\
\004\000\005\000\006\000\088\000\010\000\091\000\090\000\011\000\
\012\000\108\000\013\000\094\000\097\000\099\000\014\000\103\000\
\105\000\106\000\015\000\031\000\104\000\011\000\107\000\115\000\
\117\000\054\000\008\000\109\000\041\000\049\000\111\000\112\000\
\015\000\113\000\004\000\005\000\006\000\114\000\045\000\043\000\
\003\000\004\000\005\000\006\000\007\000\008\000\039\000\119\000\
\120\000\009\000\004\000\005\000\006\000\059\000\102\000\011\000\
\031\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\
\000\000\013\000\015\000\000\000\000\000\014\000\000\000\011\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\015\000\000\000\000\000\000\000\037\000\000\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\048\000\032\000\066\000\000\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\009\000\048\000\000\000\110\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\013\000\
\048\000\000\000\116\000\000\000\000\000\000\000\000\000\000\000\
\035\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\007\000\007\000\012\000\
\007\000\000\000\000\000\000\000\007\000\000\000\007\000\000\000\
\007\000\007\000\007\000\049\000\049\000\049\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\025\000\049\000\049\000\
\049\000\000\000\049\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\049\000\049\000\049\000\048\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\024\000\
\048\000\048\000\048\000\000\000\048\000\022\000\000\000\000\000\
\048\000\000\000\000\000\000\000\048\000\048\000\048\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\016\000\008\000\008\000\
\000\000\000\000\008\000\034\000\000\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\017\000\031\000\031\000\000\000\000\000\
\031\000\029\000\000\000\000\000\031\000\000\000\000\000\000\000\
\031\000\000\000\031\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\020\000\037\000\037\000\000\000\000\000\037\000\030\000\
\000\000\000\000\037\000\000\000\000\000\000\000\037\000\000\000\
\037\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\021\000\
\032\000\032\000\000\000\000\000\032\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\032\000\009\000\
\009\000\009\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\018\000\009\000\009\000\000\000\
\000\000\009\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\009\000\000\000\009\000\013\000\013\000\000\000\000\000\
\013\000\013\000\019\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\013\000\
\000\000\051\000\000\000\013\000\035\000\035\000\050\000\013\000\
\035\000\013\000\000\000\000\000\012\000\012\000\000\000\000\000\
\012\000\012\000\035\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\033\000\012\000\012\000\000\000\000\000\012\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\012\000\
\000\000\012\000\025\000\025\000\000\000\000\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\025\000\025\000\000\000\000\000\025\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\025\000\000\000\025\000\
\000\000\000\000\000\000\000\000\024\000\024\000\000\000\000\000\
\024\000\024\000\000\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\024\000\024\000\000\000\000\000\024\000\
\000\000\022\000\022\000\024\000\000\000\022\000\000\000\024\000\
\000\000\024\000\000\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\016\000\000\000\000\000\016\000\000\000\034\000\
\034\000\016\000\000\000\034\000\000\000\016\000\000\000\016\000\
\000\000\000\000\000\000\034\000\000\000\034\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\000\000\000\000\017\000\000\000\029\000\029\000\017\000\
\000\000\029\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\020\000\000\000\
\000\000\020\000\000\000\030\000\030\000\020\000\000\000\030\000\
\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\021\000\021\000\000\000\000\000\021\000\
\000\000\028\000\028\000\021\000\000\000\028\000\000\000\021\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\018\000\000\000\018\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\019\000\019\000\
\000\000\000\000\019\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\019\000\000\000\019\000\051\000\051\000\000\000\
\000\000\051\000\050\000\050\000\000\000\051\000\050\000\000\000\
\000\000\051\000\050\000\051\000\000\000\000\000\050\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\033\000\033\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\048\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\048\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\101\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\048\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\048\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\048\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\098\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000"

let yycheck = "\026\001\
\000\000\028\001\022\001\001\000\001\000\022\001\028\001\027\001\
\022\001\007\000\008\000\009\000\010\000\033\001\027\000\014\000\
\033\001\015\000\017\000\033\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\007\001\008\001\013\001\030\000\
\011\001\012\001\000\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\063\000\022\001\051\000\022\001\052\000\053\000\
\054\000\000\001\001\001\002\001\003\001\004\001\005\001\028\001\
\062\000\026\001\009\001\033\001\000\000\034\001\028\001\030\001\
\001\001\002\001\003\001\022\001\019\001\028\001\024\001\022\001\
\023\001\094\000\025\001\028\001\033\001\083\000\029\001\013\001\
\022\001\022\001\033\001\034\001\090\000\022\001\013\001\034\001\
\031\001\000\000\000\000\097\000\013\001\030\001\100\000\101\000\
\033\001\103\000\001\001\002\001\003\001\107\000\026\001\028\001\
\000\001\001\001\002\001\003\001\004\001\005\001\024\001\117\000\
\118\000\009\001\001\001\002\001\003\001\026\000\088\000\022\001\
\000\000\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\255\255\025\001\033\001\255\255\255\255\029\001\255\255\022\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\000\000\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\032\001\000\000\034\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\000\000\032\001\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\000\000\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\000\000\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\022\001\000\000\
\024\001\255\255\255\255\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\034\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\022\001\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\032\001\033\001\034\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\022\001\255\255\024\001\000\000\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\033\001\034\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\255\255\255\255\024\001\000\000\255\255\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\000\000\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\255\255\024\001\000\000\
\255\255\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\255\255\034\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\000\000\020\001\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\032\001\255\255\034\001\005\001\006\001\255\255\255\255\
\009\001\010\001\000\000\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\000\000\255\255\028\001\020\001\021\001\000\000\032\001\
\024\001\034\001\255\255\255\255\005\001\006\001\255\255\255\255\
\009\001\010\001\034\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\005\001\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\255\255\005\001\006\001\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\020\001\021\001\028\001\255\255\024\001\255\255\032\001\
\255\255\034\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\255\255\024\001\255\255\020\001\
\021\001\028\001\255\255\024\001\255\255\032\001\255\255\034\001\
\255\255\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\020\001\021\001\028\001\
\255\255\024\001\255\255\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\034\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\020\001\021\001\028\001\255\255\024\001\
\255\255\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\020\001\021\001\028\001\255\255\024\001\255\255\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\255\255\034\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\020\001\021\001\255\255\
\255\255\024\001\020\001\021\001\255\255\028\001\024\001\255\255\
\255\255\032\001\028\001\034\001\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  FUN\000\
  ARROW\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 72 "parser.mly"
    ( _2 )
# 486 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
    ( Unit (getpos ()) )
# 492 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 76 "parser.mly"
    ( Bool(_1, getpos ()) )
# 499 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 78 "parser.mly"
    ( Int(_1, getpos ()) )
# 506 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 80 "parser.mly"
    ( Float(_1, getpos ()) )
# 513 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 82 "parser.mly"
    ( Var(_1, getpos ()) )
# 520 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 84 "parser.mly"
    ( Get(_1, _4) )
# 528 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 88 "parser.mly"
    ( _1 )
# 535 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 90 "parser.mly"
 ( _1 )
# 542 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Not(_2) )
# 549 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( match _2 with
    | Float(f, p) -> Float(-.f, p) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 558 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Add(_1, _3) )
# 566 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Sub(_1, _3) )
# 574 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
 ( Mul(_1, _3) )
# 582 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
 ( Div(_1, _3) )
# 590 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Eq(_1, _3) )
# 598 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 606 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Not(LE(_3, _1)) )
# 614 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( Not(LE(_1, _3)) )
# 622 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( LE(_1, _3) )
# 630 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( LE(_3, _1) )
# 638 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( If(_2, _4, _6) )
# 647 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( FNeg(_2) )
# 654 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( FAdd(_1, _3) )
# 662 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( FSub(_1, _3) )
# 670 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( FMul(_1, _3) )
# 678 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( FDiv(_1, _3) )
# 686 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 695 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
 ( Fun(_2, _4, getpos ()) )
# 703 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
    ( LetRec(_3, _5) )
# 711 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 144 "parser.mly"
    ( App(_1, _2) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 147 "parser.mly"
    ( Tuple(_1) )
# 726 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 149 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 735 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( Put(_1, _4, _7) )
# 744 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 153 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 752 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 155 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 760 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 158 "parser.mly"
    ( Array(_2, _3) )
# 768 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d-%d characters %d-%d"
		   ((Parsing.symbol_start_pos ()).Lexing.pos_lnum)
		   ((Parsing.symbol_end_pos ()).Lexing.pos_lnum)
           ((Parsing.symbol_start_pos ()).Lexing.pos_cnum - (Parsing.symbol_start_pos ()).Lexing.pos_bol)
           ((Parsing.symbol_end_pos ()).Lexing.pos_cnum - (Parsing.symbol_end_pos ()).Lexing.pos_bol)) )
# 779 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 169 "parser.mly"
    ( { name = (addtyp _1, getpos ()); args = _2; body = _4 } )
# 788 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 173 "parser.mly"
    ( addtyp _1 :: _2 )
# 796 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 175 "parser.mly"
    ( [addtyp _1] )
# 803 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'argtuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'argtuple) in
    Obj.repr(
# 179 "parser.mly"
 ( _2 @ _4 )
# 811 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argtuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 181 "parser.mly"
 ( _1 @ _3 )
# 819 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 183 "parser.mly"
 ( [addtyp _1] )
# 826 "parser.ml"
               : 'argtuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argtuple) in
    Obj.repr(
# 187 "parser.mly"
 ( _1 )
# 833 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funargs) in
    Obj.repr(
# 189 "parser.mly"
 ( addtyp _1 :: _2 )
# 841 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 191 "parser.mly"
 ( [addtyp _1] )
# 848 "parser.ml"
               : 'funargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 196 "parser.mly"
    ( _1 @ [_2] )
# 856 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 199 "parser.mly"
    ( [_1] )
# 863 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 203 "parser.mly"
    ( _1 @ [_3] )
# 871 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 205 "parser.mly"
    ( [_1; _3] )
# 879 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 209 "parser.mly"
    ( _1 @ [addtyp _3] )
# 887 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 211 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 895 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
